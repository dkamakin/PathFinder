plugins {
    id "io.spring.dependency-management" version "1.1.4"
    id "org.springframework.boot" version "$springBootVersion"
    id "java"
    id "java-test-fixtures"
    id "java-library"
}

group = 'com.github'
version = '1.0'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

bootJar {
    enabled = false
}

jar {
    enabled = true
}

subprojects {
    apply plugin: 'java'
    apply plugin: "io.spring.dependency-management"
    apply plugin: "org.springframework.boot"
    apply plugin: 'java-library'

    def lombokVersion = "1.18.30"
    def assertJVersion = "3.25.0"
    def h2Version = "2.2.224"
    def postgresqlVersion = "42.7.1"
    def guavaVersion = "33.0.0-jre"
    def springRetryVersion = "2.0.5"
    def springActuatorVersion = "3.2.2"
    def springCloudBusVersion = "4.1.0"
    def apacheCommonsVersion = "3.14.0"
    def mapStructVersion = "1.5.5.Final"
    def springSecurityTestVersion = "6.2.1"

    ext {
        mainClassName = ''
    }

    dependencies {
        implementation("org.mapstruct:mapstruct:$mapStructVersion")
        implementation("org.springframework.boot:spring-boot-starter-validation:$springBootVersion")
        implementation("org.springframework.boot:spring-boot-starter-web:$springBootVersion")
        implementation("org.springframework.boot:spring-boot-starter-aop:$springBootVersion")
        implementation("org.springframework.retry:spring-retry:$springRetryVersion")
        implementation("org.apache.commons:commons-lang3:$apacheCommonsVersion")
        implementation("org.springframework.boot:spring-boot-starter-actuator:$springActuatorVersion")
        api("org.springframework.cloud:spring-cloud-starter-bus-amqp:$springCloudBusVersion")

        implementation("org.postgresql:postgresql:$postgresqlVersion")

        implementation("com.google.guava:guava:$guavaVersion")

        testRuntimeOnly("com.h2database:h2:$h2Version")
        testImplementation("org.assertj:assertj-core:$assertJVersion")
        testImplementation("org.springframework.boot:spring-boot-starter-test:$springBootVersion")
        testAnnotationProcessor("org.projectlombok:lombok:$lombokVersion")
        testAnnotationProcessor("org.mapstruct:mapstruct-processor:$mapStructVersion")
        testImplementation("org.springframework.security:spring-security-test:$springSecurityTestVersion")
        testCompileOnly("org.projectlombok:lombok:$lombokVersion")

        compileOnly("org.projectlombok:lombok:$lombokVersion")
        annotationProcessor("org.projectlombok:lombok:$lombokVersion")
        annotationProcessor("org.mapstruct:mapstruct-processor:$mapStructVersion")
    }

    test {
        useJUnitPlatform()
    }

    afterEvaluate {
        jar {
            manifest {
                attributes(
                        "Implementation-Title": project.name,
                        "Implementation-Version": project.version,
                        "Main-Class": mainClassName
                )
            }
            include '**/**'
        }
    }
}

wrapper {
    version = '8.4'
}